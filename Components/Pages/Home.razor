@page "/"
@inject IDialogService DialogService

<PageTitle>Home</PageTitle>


<MudStack Row>
    <MudText Typo="Typo.h6" GutterBottom="true">支払い一覧</MudText>
    <MudSpacer />
    <MudButton @onclick="OpenAddDialogAsync" Variant="Variant.Filled" Color="Color.Primary">新規作成</MudButton>
</MudStack>

@if (payments.Count == 0)
{
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h6">No payments found.</MudText>
        </MudCardContent>
    </MudCard>
}
else
{
    <MudDataGrid Items="@payments" Dense ReadOnly>
        <Columns>
            <TemplateColumn Title="編集">
                <CellTemplate>
                    <div style="width: 50px;">
                        <MudButton OnClick="@(() => OpenEditDialogAsync(context.Item))" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                    </div>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.PaymentAt" Title="支払日" Format="yyyy-MM-dd" />
            <PropertyColumn Property="x => x.Name" Title="用途" />
            <PropertyColumn Property="x => x.Amount" Title="金額" Format="N0" />
        </Columns>
    </MudDataGrid>
}

@code
{
    List<Payment> payments = Backend.AppDatabase.GetPayments();

    private async Task OpenAddDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var dialogReference = await DialogService.ShowAsync<Dialogs.PaymentDialog>("支払い 新規作成", options);
        var result = await dialogReference.Result;
        if (result == null || result.Canceled)
        {
            return;
        }

        payments = Backend.AppDatabase.GetPayments();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OpenEditDialogAsync(Payment payment)
    {
        var parameters = new DialogParameters<Dialogs.PaymentDialog>
        {
            { x => x.Payment, payment }
        };

        var dialogReference = await DialogService.ShowAsync<Dialogs.PaymentDialog>("支払い 編集", parameters);
        var result = await dialogReference.Result;
        if (result == null || result.Canceled)
        {
            return;
        }

        payments = Backend.AppDatabase.GetPayments();
        await InvokeAsync(StateHasChanged);
    }
}